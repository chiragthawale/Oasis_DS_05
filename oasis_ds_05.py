# -*- coding: utf-8 -*-
"""Oasis_DS_05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D2K5MVahBuyUXN4-50qdEAkTSf2eWhFB
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as pt
import seaborn as sb
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

#To load the dataset
d_read = pd.read_csv("/content/Untitled Folder/Advertising.csv")

#TO PRINT THE DATASET INFORMATION
print("              The DATASET            ")
print()
print()
print(d_read)

#REGARDING BASIC INFORMATION
d_read.info()

#TOP 10 ENTRIES OF THE DATA SET
d_read.head(10)

#LAST 10 ENTRIES OF THE DATASET
d_read.tail(10)

#MEAN,MINIMUM,COUNT,MAX STATISTICS
d_read.describe()

#DIMENSIONS AND SIZE INFORMATION ABOUT THE DATASET
#USING shape()
print("Dimensions: ",d_read.shape)
print("Size of advertisement dataset: ",d_read.size)

#LIST OF COLUMN NAMES IN THE DATASET
print("Names of columns in sales prediction: \n",d_read.columns)

#checking the null values of the dataset
d_read.isna().sum()

d_read.describe()

d_read.isnull().sum()

# Sales distribution
pt.figure(figsize=(9,9))
sb.distplot(d_read['Sales'])
pt.show()

#TV distribution
pt.figure(figsize=(7,7))
sb.distplot(d_read['TV'])
pt.show()

#Radio distribution
pt.figure(figsize=(5,5))
sb.distplot(d_read['Radio'])
pt.show()

#Newspaper distribution
pt.figure(figsize=(5,5))
sb.distplot(d_read['Newspaper'])
pt.show()

d_read.isnull().sum()

d_read.duplicated().value_counts()

sb.pairplot(d_read)

#heatmap
cl=d_read.corr()
sb.heatmap(cl, xticklabels=cl.columns, yticklabels=cl.columns, annot=True)

d_read1 = d_read.drop(['Unnamed: 0'], axis=1, inplace=True)
d_read

d_read.columns

X =np.array(d_read.drop(['Sales'], 1))
y =np.array(d_read['Sales'])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test= train_test_split(X, y,train_size=0.8,test_size=0.2,random_state=0)

from sklearn.linear_model import LinearRegression
regressor1 = LinearRegression()
regressor1.fit(X_train, y_train)

y_prediction = regressor1.predict(X_test)
y_prediction

# calculating the coefficient
cf = regressor1.coef_
cf

# calculating the intercept
intercept = regressor1.intercept_
intercept

# calculating the R squared value
from sklearn.metrics import r2_score
r2_score(y_test, y_prediction)

fc=pd.DataFrame(data={'Forecasted Sales': y_prediction.flatten()})
fc

pt.figure(figsize=(8,8))
sb.distplot(fc['Forecasted Sales'])
pt.show()

